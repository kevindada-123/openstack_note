apt install openssh-server vim net-tools -y
vim /etc/network/interfaces

auto ens34
iface ens34 inet manual
up ip link set dev $IFACE up
down ip link set dev $IFACE down

vim /etc/hostname
vim /etc/hosts

192.168.58.189 controller
192.168.58.190 compute

add-apt-repository cloud-archive:rocky
apt-get update && apt-get dist-upgrade
reboot
apt install python-openstackclient

[mysqld]
bind-address = 192.168.58.189

default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8

apt-get install rabbitmq-server
rabbitmqctl add_user openstack mima
rabbitmqctl set_permissions openstack ".*" ".*" ".*"

apt-get install memcached python-memcache
vim /etc/memcached.conf

-l 192.168.58.189

service memcached restart

apt install etcd
vim /etc/default/etcd
ETCD_NAME="controller"
ETCD_DATA_DIR="/var/lib/etcd"
ETCD_INITIAL_CLUSTER_STATE="new"
ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
ETCD_INITIAL_CLUSTER="controller=http://192.168.58.189:2380"
ETCD_INITIAL_ADVERTISE_PEER_URLS="http://192.168.58.189:2380"
ETCD_ADVERTISE_CLIENT_URLS="http://192.168.58.189:2379"
ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
ETCD_LISTEN_CLIENT_URLS="http://192.168.58.189:2379"

systemctl enable etcd
systemctl restart etcd

#Identity service install (keystone)
mysql –u root -p
CREATE DATABASE keystone;
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
  IDENTIFIED BY 'mima';

exit

connection = mysql+pymysql://keystone:mima@controller/keystone


keystone-manage bootstrap --bootstrap-password mima \
  --bootstrap-admin-url http://controller:5000/v3/ \
  --bootstrap-internal-url http://controller:5000/v3/ \
  --bootstrap-public-url http://controller:5000/v3/ \
  --bootstrap-region-id RegionOne
  
export OS_USERNAME=admin
export OS_PASSWORD=mima
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3

vim admin-openrc

export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=mima
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2

vim demo-openrc

export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=myuser
export OS_PASSWORD=mima
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2


mysql -u root -p
CREATE DATABASE glance;
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
  IDENTIFIED BY 'mima';
exit

vim /etc/glance/glance-api.conf

[database]
# ...
connection = mysql+pymysql://glance:mima@controller/glance

[keystone_authtoken]
# ...
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = mima

[paste_deploy]
# ...
flavor = keystone

[glance_store]
# ...
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/

vim /etc/glance/glance-registry.conf

[database]
# ...
connection = mysql+pymysql://glance:mima@controller/glance

[keystone_authtoken]
# ...
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = mima

[paste_deploy]
# ...
flavor = keystone

su -s /bin/sh -c "glance-manage db_sync" glance
service glance-registry restart
service glance-api restart

#Compute service (nova) 
#controller node
mysql -u root -p
CREATE DATABASE nova_api;
CREATE DATABASE nova;
CREATE DATABASE nova_cell0;
CREATE DATABASE placement;


GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
  IDENTIFIED BY 'mima';

GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
  IDENTIFIED BY 'mima';

GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \
  IDENTIFIED BY 'mima';

GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' \
  IDENTIFIED BY 'mima';
  
  
vim /etc/nova/nova.conf

[api_database]
# ...
connection = mysql+pymysql://nova:mima@controller/nova_api

[database]
# ...
connection = mysql+pymysql://nova:mima@controller/nova

[placement_database]
# ...
connection = mysql+pymysql://placement:mima@controller/placement

[DEFAULT]
# ...
transport_url = rabbit://openstack:mima@controller

[api]
# ...
auth_strategy = keystone

[keystone_authtoken]
# ...
auth_url = http://controller:5000/v3
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = mima

[DEFAULT]
# ...
my_ip = 192.168.58.189
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[vnc]
enabled = true
# ...
server_listen = $my_ip
server_proxyclient_address = $my_ip

[glance]
# ...
api_servers = http://controller:9292

[oslo_concurrency]
# ...
lock_path = /var/lib/nova/tmp

[placement]
# ...
region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:5000/v3
username = placement
password = mima

service nova-api restart
service nova-consoleauth restart
service nova-scheduler restart
service nova-conductor restart
service nova-novncproxy restart

#compute node

apt install nova-compute

vim /etc/nova/nova.conf

[DEFAULT]
# ...
transport_url = rabbit://openstack:mima@controller

[api]
# ...
auth_strategy = keystone

[keystone_authtoken]
# ...
auth_url = http://controller:5000/v3
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = mima

#Comment out or remove any other options in the [keystone_authtoken] section.

[DEFAULT]
# ...
my_ip = 192.168.58.190
use_neutron = true
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[vnc]
# ...
enabled = true
server_listen = 0.0.0.0
server_proxyclient_address = $my_ip
novncproxy_base_url = http://controller:6080/vnc_auto.html

[glance]
# ...
api_servers = http://controller:9292

[oslo_concurrency]
# ...
lock_path = /var/lib/nova/tmp

[placement]
region_name = RegionOne
project_domain_name = Default
project_name = service
auth_type = password
user_domain_name = Default
auth_url = http://controller:5000/v3
username = placement
password = mima
#Due to a packaging bug, remove the log_dir option from the [DEFAULT] section.

vim /etc/nova/nova-compute.conf

[libvirt]
# ...
virt_type = qemu

service nova-compute restart

egrep -c '(vmx|svm)' /proc/cpuinfo

vim /etc/nova/nova-compute.conf

[libvirt]
# ...
virt_type = qemu

service nova-compute restart

#Add the compute node to the cell database
#Controller node
. admin-openrc
openstack compute service list --service nova-compute
su -s /bin/sh -c "nova-manage cell_v2 discover_hosts --verbose" nova

#Verify operation
. admin-openrc
openstack compute service list
openstack catalog list
openstack image list
nova-status upgrade check

#Networking service install
mysql

CREATE DATABASE neutron;

GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' \
  IDENTIFIED BY 'mima';
exit
  
apt install neutron-server neutron-plugin-ml2 \
  neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent \
  neutron-metadata-agent
  
vim /etc/neutron/neutron.conf

[database]
# ...
connection = mysql+pymysql://neutron:mima@controller/neutron

[DEFAULT]
# ...
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = true

[DEFAULT]
# ...
transport_url = rabbit://openstack:mima@controller

[DEFAULT]
# ...
auth_strategy = keystone

[keystone_authtoken]
# ...
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = mima

[DEFAULT]
# ...
notify_nova_on_port_status_changes = true
notify_nova_on_port_data_changes = true

[nova]
auth_url = http://controller:5000
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = nova
password = mima

vim /etc/neutron/plugins/ml2/ml2_conf.ini

[ml2]
# ...
type_drivers = flat,vlan,vxlan
tenant_network_types = vxlan
mechanism_drivers = linuxbridge,l2population
extension_drivers = port_security

[ml2_type_flat]
# ...
flat_networks = provider

[ml2_type_vxlan]
# ...
vni_ranges = 1:1000

[securitygroup]
# ...
enable_ipset = true


vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini

[linux_bridge]
physical_interface_mappings = provider:ens33

[vxlan]
enable_vxlan = true
local_ip = 192.168.58.129
l2_population = true

[securitygroup]
# ...
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

sysctl net.bridge.bridge-nf-call-iptables
sysctl net.bridge.bridge-nf-call-ip6tables

vim /etc/neutron/l3_agent.ini

[DEFAULT]
# ...
interface_driver = linuxbridge

vim /etc/neutron/dhcp_agent.ini

[DEFAULT]
# ...
interface_driver = linuxbridge
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = true

vim /etc/neutron/metadata_agent.ini

[DEFAULT]
# ...
nova_metadata_host = controller
metadata_proxy_shared_secret = mima

vim /etc/nova/nova.conf

[neutron]
# ...
url = http://controller:9696
auth_url = http://controller:5000
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = mima
service_metadata_proxy = true
metadata_proxy_shared_secret = mima

su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \
  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
service nova-api restart
service neutron-server restart
service neutron-linuxbridge-agent restart
service neutron-dhcp-agent restart
service neutron-metadata-agent restart
service neutron-l3-agent restart

#compute node
apt install neutron-linuxbridge-agent

vim /etc/neutron/neutron.conf

[DEFAULT]
# ...
transport_url = rabbit://openstack:mima@controller

[DEFAULT]
# ...
auth_strategy = keystone

[keystone_authtoken]
# ...
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = neutron
password = mima

[oslo_concurrency]
# ...
lock_path = /var/lib/neutron/tmp

vim  /etc/neutron/plugins/ml2/linuxbridge_agent.ini

[linux_bridge]
physical_interface_mappings = provider:ens33

[vxlan]
enable_vxlan = true
local_ip = 192.168.58.130
l2_population = true

[securitygroup]
# ...
enable_security_group = true
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver

sysctl net.bridge.bridge-nf-call-iptables
sysctl net.bridge.bridge-nf-call-ip6tables

vim /etc/nova/nova.conf

[neutron]
# ...
url = http://controller:9696
auth_url = http://controller:5000
auth_type = password
project_domain_name = default
user_domain_name = default
region_name = RegionOne
project_name = service
username = neutron
password = mima

service nova-compute restart
service neutron-linuxbridge-agent restart

#Verify operation
. admin-openrc
neutron agent-list


#launch instance
#Create the provider network
. admin-openrc
openstack network create  --share --external \
  --provider-physical-network provider \
  --provider-network-type flat provider
  

openstack subnet create --network provider \
  --allocation-pool start=192.168.58.50,end=192.168.58.100 \
  --dns-nameserver 8.8.4.4 --gateway 192.168.58.2 \
  --subnet-range 192.168.58.0/24 provider
  
#Create the self-service network
. demo-openrc
openstack network create selfservice
openstack subnet create --network selfservice --dns-nameserver 8.8.4.4 --gateway 172.16.1.1 --subnet-range 172.16.1.0/24 selfservice
#Create a router
. demo-openrc
openstack router create router
openstack router add subnet router selfservice
openstack router set router --external-gateway provider

#Verify operation
. admin-openrc
ip netns
openstack port list --router router
ping -c 4 192.168.58.55

#Create m1.nano flavor
openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano
#Generate a key pair
. demo-openrc
ssh-keygen -q -N ""
openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey
openstack keypair list
#Add security group rules 
openstack security group rule create --proto icmp default
openstack security group rule create --proto tcp --dst-port 22 default

#Launch an instance on the provider network
. demo-openrc
openstack network list
openstack server create --flavor m1.nano --image cirros --nic net-id=PUBLIC_NET_ID --security-group default --key-name mykey provider-instance
#Replace PUBLIC_NET_ID with the ID of the provider network.

#Launch an instance on the provider network(Cont.)
openstack server list

#Access the instance using the virtual console
openstack console url show provider-instance
#複製此段網址貼到瀏覽器即可以novnc存取此instance的console


#dashboard
apt install openstack-dashboard

vim /etc/openstack-dashboard/local_settings.py

OPENSTACK_HOST = "controller"

ALLOWED_HOSTS = '*'

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
    'default': {
         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
         'LOCATION': 'controller:11211',
    }
}

OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = "Default"
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST

OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True

OPENSTACK_API_VERSIONS = {
    "data-processing": 1.1,
    "identity": 3,
    "image": 2,
    "volume": 2,
    "compute": 2,
}

TIME_ZONE = "UTC"

vim /etc/apache2/conf-available/openstack-dashboard.conf

...
WSGIApplicationGroup %{GLOBAL}

service apache2 reload
http://controller/horizon

#heat
mysql -u root -p
CREATE DATABASE heat;
GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON heat.* TO 'heat'@'%' \
  IDENTIFIED BY 'mima';
  
. admin-openrc
openstack user create --domain default --password-prompt heat
openstack role add --project service --user heat admin
openstack service create --name heat --description "Orchestration" orchestration
openstack service create --name heat-cfn --description "Orchestration" cloudformation

openstack endpoint create --region RegionOne orchestration public http://controller:8004/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne orchestration internal http://controller:8004/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne orchestration admin http://controller:8004/v1/%\(tenant_id\)s
openstack endpoint create --region RegionOne cloudformation public http://controller:8000/v1
openstack endpoint create --region RegionOne cloudformation internal http://controller:8000/v1
openstack endpoint create --region RegionOne cloudformation admin http://controller:8000/v1

openstack domain create --description "Stack projects and users" heat
openstack user create --domain heat --password-prompt heat_domain_admin
openstack role add --domain heat --user-domain heat --user heat_domain_admin admin
openstack role create heat_stack_owner
openstack role add --project myproject --user myuser heat_stack_owner
openstack role create heat_stack_user

apt-get install heat-api heat-api-cfn heat-engine

vim /etc/heat/heat.conf

[database]
...
connection = mysql+pymysql://heat:mima@controller/heat

[DEFAULT]
transport_url = rabbit://openstack:mima@controller

[keystone_authtoken]

www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = heat
password = mima

[trustee]

auth_type = password
auth_url = http://controller:5000
username = heat
password = mima
user_domain_name = default

[clients_keystone]

auth_uri = http://controller:5000

[DEFAULT]

heat_metadata_server_url = http://controller:8000
heat_waitcondition_server_url = http://controller:8000/v1/waitcondition
stack_domain_admin = heat_domain_admin
stack_domain_admin_password = mima
stack_user_domain_name = heat


su -s /bin/sh -c "heat-manage db_sync" heat

service heat-api restart
service heat-api-cfn restart
service heat-engine restart

#barbican

mysql
CREATE DATABASE barbican;
GRANT ALL PRIVILEGES ON barbican.* TO 'barbican'@'localhost' \
  IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON barbican.* TO 'barbican'@'%' \
  IDENTIFIED BY 'mima';
exit

vim /etc/barbican/barbican.conf

[DEFAULT]
sql_connection = mysql+pymysql://barbican:mima@controller/barbican
transport_url = rabbit://openstack:mima@controller

[keystone_authtoken]

www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = default
user_domain_name = default
project_name = service
username = barbican
password = mima

#Verify operation of the Key Manager (barbican) service.
apt-get install python-barbicanclient
. admin-openrc
openstack secret store --name mysecret --payload j4=]d21
openstack secret get http://localhost:9311/v1/secrets/66c8d9f6-9715-47bb-ab20-efeb95f0632a
openstack secret get http://localhost:9311/v1/secrets/66c8d9f6-9715-47bb-ab20-efeb95f0632a --payload

#mistral

apt-get install python-dev python-setuptools python-pip libffi-dev libxslt1-dev libxml2-dev libyaml-dev libssl-dev
cd /home/controller
git clone https://github.com/openstack/mistral.git -b stable/rocky
cd mistral
pip install tox
tox -egenconfig
#(若出現UnicodeEncodeError: ‘ascii’ codec can‘t encode 下 sudo apt-get install python3-dev再試一次)
mkdir /etc/mistral
cp etc/mistral.conf.sample /etc/mistral/mistral.conf
pip install -r requirements.txt
python setup.py install

vim /etc/mistral/mistral.conf

[DEFAULT]
transport_url = rabbit://openstack:mima@controller:5672/

[pecan]
auth_enable = False

[keystone_authtoken]
www_authenticate_uri = http://controller:5000/v3
identity_uri = http://controller:5000
auth_version = v3
admin_user = admin
admin_password = mima
admin_tenant_name = admin
memcached_servers = controller:11211

[database]
connection=mysql+pymysql://mistral:mima@controller:3306/mistral

[oslo_policy]
policy_file = /etc/mistral/policy.json

[action_heartbeat]
max_missed_heartbeats = 15
check_interval = 20
first_heartbeat_timeout = 3600

cp etc/policy.json /etc/mistral/


mysql -u root -p
CREATE DATABASE mistral;
GRANT ALL PRIVILEGES ON mistral.* TO 'mistral'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON mistral.* TO 'mistral'@'%' IDENTIFIED BY 'mima';
#Replace MISTRAL_DBPASS with a suitable password.
Exit
openstack service create --name mistral --description "Openstack Workflow service" workflow
openstack endpoint create --region RegionOne workflow public http://controller:8989/v2
openstack endpoint create --region RegionOne workflow internal http://controller:8989/v2
openstack endpoint create --region RegionOne workflow admin http://controller:8989/v2

mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head
mistral-db-manage --config-file /etc/mistral/mistral.conf populate

#開啟Server(每次開機都要做)
mistral-server --server all --config-file /etc/mistral/mistral.conf

#NFV Orchestration service(Tacker)

cd /home/controller(回到家目錄)
vim admin-openrc

export OS_TENANT_NAME=admin
export OS_INTERFACE=internal
export OS_REGION_NAME=RegionOne
export OS_AUTH_TYPE=password

mysql -uroot -p
CREATE DATABASE tacker;
GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON tacker.* TO 'tacker'@'%' IDENTIFIED BY 'mima';
exit;

. admin-openrc
openstack user create --domain default --password mima tacker
openstack role add --project service --user tacker admin
openstack service create --name tacker --description "Tacker Project" nfv-orchestration
openstack endpoint create --region RegionOne nfv-orchestration public http://controller:9890/
openstack endpoint create --region RegionOne nfv-orchestration internal http://controller:9890/
openstack endpoint create --region RegionOne nfv-orchestration admin http://controller:9890/

git clone https://github.com/openstack/tacker -b stable/rocky
cd tacker
pip install -r requirements.txt
python setup.py install
mkdir /var/log/tacker
tox -e config-gen
mv etc/tacker/tacker.conf.sample etc/tacker/tacker.conf

vim etc/tacker/tacker.conf

[DEFAULT]
auth_strategy = keystone
policy_file = /usr/local/etc/tacker/policy.json
debug = True
use_syslog = False
bind_host = 192.168.58.189
bind_port = 9890
service_plugins = nfvo,vnfm
state_path = /var/lib/tacker

[nfvo_vim]
vim_drivers = openstack

[agent] #新增
root_helper = sudo /usr/local/bin/tacker-rootwrap /usr/local/etc/tacker/rootwrap.conf

[keystone_authtoken]
memcached_servers = 11211
region_name = RegionOne
auth_type = password
project_domain_name = Default
user_domain_name = Default
username = tacker
project_name = service
password = mima
auth_url = http://controller:5000
www_authenticate_uri = http://controller:5000

[database]
connection = mysql+pymysql://tacker:mima@controller:3306/tacker?charset=utf8

[tacker]
monitor_driver = ping,http_ping

cp etc/tacker/tacker.conf /usr/local/etc/tacker/
/usr/local/bin/tacker-db-manage --config-file /usr/local/etc/tacker/tacker.conf upgrade head
cp etc/systemd/system/tacker.service /etc/systemd/system/
cp etc/systemd/system/tacker-conductor.service /etc/systemd/system/
systemctl daemon-reload

cd /home/controller
git clone https://github.com/openstack/python-tackerclient -b stable/rocky
cd python-tackerclient
python setup.py install

#Tacker horizon
cd /home/controller
git clone https://github.com/openstack/tacker-horizon -b stable/rocky
cd tacker-horizon
python setup.py install
cp tacker_horizon/enabled/* /usr/share/openstack-dashboard/openstack_dashboard/enabled/
service apache2 restart

#Ceilometer
#Controller node
cd /home/controller
. admin-openrc
openstack user create --domain default --password-prompt ceilometer
openstack role add --project service --user ceilometer admin
openstack user create --domain default --password-prompt gnocchi
openstack service create --name gnocchi --description "Metric Service" metric
openstack role add --project service --user gnocchi admin

openstack endpoint create --region RegionOne metric public http://controller:8041
openstack endpoint create --region RegionOne metric internal http://controller:8041
openstack endpoint create --region RegionOne metric admin http://controller:8041
apt-get install gnocchi-api gnocchi-metricd python-gnocchiclient

mysql -uroot -p
CREATE DATABASE gnocchi;
GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON gnocchi.* TO 'gnocchi'@'%' IDENTIFIED BY 'mima';
exit;

vim /etc/gnocchi/gnocchi.conf

[api]
auth_mode = keystone

[keystone_authtoken]
auth_type = password
auth_url = http://controller:5000/v3
project_domain_name = Default
user_domain_name = Default
project_name = service
username = gnocchi
password = mima
interface = internalURL
region_name = RegionOne

[indexer]
url = mysql+pymysql://gnocchi:mima@controller/gnocchi

[storage]
# coordination_url is not required but specifying one will improve
# performance with better workload division across workers.
coordination_url = file:///var/lib/gnocchi/locks
file_basepath = /var/lib/gnocchi
driver = file

gnocchi-upgrade
service apache2 restart
service gnocchi-metricd restart
chown -R gnocchi:gnocchi /var/lib/gnocchi

apt-get install ceilometer-agent-notification \
ceilometer-agent-central

vim /etc/ceilometer/ceilometer.conf 

[DEFAULT]
transport_url = rabbit://openstack:mima@controller

#add
[dispatcher_gnocchi]
archive_policy = high

[service_credentials]
auth_type = password
auth_url = http://controller:5000/v3
project_domain_id = default
user_domain_id = default
project_name = service
username = ceilometer
password = mima
interface = internalURL
region_name = RegionOne

vim /etc/ceilometer/pipeline.yaml

ceilometer-upgrade
#(若出現HTTP 500，下apt install python-gnocchi 及 . admin-openrc 再重試一次)

service ceilometer-agent-central restart
service ceilometer-agent-notification restart

vim /etc/glance/glance-api.conf

[DEFAULT]
transport_url = rabbit://openstack:mima@controller

[oslo_messaging_notifications]
driver = messagingv2

service glance-registry restart
service glance-api restart

vim /etc/heat/heat.conf

[oslo_messaging_notifications]
driver = messagingv2

service heat-api restart
service heat-api-cfn restart
service heat-engine restart
vim /etc/neutron/neutron.conf

[oslo_messaging_notifications]
driver = messagingv2

service neutron-server restart

#Compute node
apt-get install ceilometer-agent-compute
vim /etc/ceilometer/ceilometer.conf

[DEFAULT]
transport_url = rabbit://openstack:mima@controller

[service_credentials]
auth_url = http://controller:5000
project_domain_id = default
user_domain_id = default
auth_type = password
username = ceilometer
project_name = service
password = mima
interface = internalURL
region_name = RegionOne

vim /etc/nova/nova.conf

[DEFAULT]
instance_usage_audit = True
instance_usage_audit_period = hour
notify_on_state_change = vm_and_task_state

[oslo_messaging_notifications]
driver = messagingv2

vim /etc/ceilometer/pipeline.yaml(新增)
#複製NAS資料夾裡的pipeline.yaml檔案內容
service ceilometer-agent-compute restart
service nova-compute restart

#aodh

mysql -u root -p
CREATE DATABASE aodh;
GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON aodh.* TO 'aodh'@'%' IDENTIFIED BY 'mima';
exit;
. admin-openrc
openstack user create --domain default --password-prompt aodh
openstack role add --project service --user aodh admin

openstack service create --name aodh --description "Telemetry" alarming
openstack endpoint create --region RegionOne alarming public http://controller:8042
openstack endpoint create --region RegionOne alarming internal http://controller:8042
openstack endpoint create --region RegionOne alarming admin http://controller:8042
apt-get install aodh-api aodh-evaluator aodh-notifier aodh-listener aodh-expirer python-aodhclient

vim /etc/aodh/aodh.conf

[DEFAULT]
transport_url = rabbit://openstack:mima@controller
auth_strategy = keystone

[database]
connection = mysql+pymysql://aodh:mima@controller/aodh

[keystone_authtoken]
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_id = default
user_domain_id = default
project_name = service
username = aodh
password = mima

[service_credentials]
auth_type = password
auth_url = http://controller:5000/v3
project_domain_id = default
user_domain_id = default
project_name = service
username = aodh
password = mima
interface = internalURL
region_name = RegionOne


aodh-dbsync
service aodh-api restart
service aodh-evaluator restart
service aodh-notifier restart
service aodh-listener restart

#Registering default OpenStack VIM
#Controller node
cd /home/controller
. admin-openrc
cd tacker/samples/vim
vim vim_config.yaml

auth_url: 'http://192.168.58.189:5000'
username: 'admin'
password: 'mima'
project_name: 'admin'
project_domain_name: 'Default'
user_domain_name: 'Default'
cert_verify: 'False'


tacker vim-register --config-file vim_config.yaml \
     --description 'my first vim' --is-default hellovim
#若卡在pending 重裝mistral
#關閉mistral server
cd /home/controller
rm -rf mistral
git clone https://github.com/openstack/mistral.git -b stable/rocky
cd mistral
tox -egenconfig
pip install -r requirements.txt
python setup.py install

mysql
#drop database mistral;
DROP DATABASE mistral;
#create database mistral;
CREATE DATABASE mistral;
GRANT ALL PRIVILEGES ON mistral.* TO 'mistral'@'localhost' IDENTIFIED BY 'mima';
GRANT ALL PRIVILEGES ON mistral.* TO 'mistral'@'%' IDENTIFIED BY 'mima';
exit;
#開SERVER 
mistral-server --server all --config-file /etc/mistral/mistral.conf

mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head
mistral-db-manage --config-file /etc/mistral/mistral.conf populate

#Sample TOSCA with monitoring policy
#Controller node
cd /home/controller(回到家目錄)
. admin-openrc
cd tacker/samples/tosca-templates/vnfd
vim tosca-vnfd-alarm-scale.yaml(修改紅框處)

#auto scaling
tacker vnf-create --vnfd-template tosca-vnfd-alarm-scale.yaml VNF2

aodh alarm list

#若停留在insufficient data嘗試重啟服務
#(controller node)
service ceilometer-agent-central restart
service ceilometer-agent-notification restart
service gnocchi-metricd restart
#(compute node)
service ceilometer-agent-compute restart

#若停留在insufficient data，修改tacker.conf
cd /home/controller/tacker
vim etc/tacker/tacker.conf

[alarm_auth]
username = tacker
password = mima
project_name = service
url = http://controller:5000/v3

cp etc/tacker/tacker.conf /usr/local/etc/tacker/
/usr/local/bin/tacker-db-manage --config-file /usr/local/etc/tacker/tacker.conf upgrade head
systemctl daemon-reload
#tacker server重開

vim /usr/lib/python3/dist-packages/gnocchi/cli/metricd.py

try:
    # Update statistics
	self.coord.update_capabilities(self.GROUP_ID,
	                               self.store.statistics)
except tooz.NotImplemented:
    pass

#若VNF狀態停在PENDING_SCALE_IN(OUT)，修改以下程式
vim /usr/local/lib/python2.7/dist-packages/tacker/db/db_base.py

vim /usr/local/lib/python2.7/dist-packages/tacker/db/nfvo/nfvo_db_plugin.py
return query.filter(
    nfvo_db.Vim.tenant_id == context.tenant_id).filter(
	nfvo_db.Vim.is_default == sql.true()).one()

#vnf instance
#提升CPU使用率
dd if=/dev/zero of=/dev/null &
#降低CPU使用率
killall dd 
